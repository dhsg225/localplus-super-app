import type { Booking, BookingStatus, CreateBookingData, UpdateBookingData, RestaurantSettings, OperatingHours, TimeSlot, BlockedDate, MenuCategory, MenuItem, Partner, BookingNotification, Restaurant } from '../types';
export declare const bookingService: {
    createBooking(data: CreateBookingData): Promise<Booking>;
    getBookings(businessId?: string, status?: BookingStatus): Promise<Booking[]>;
    getBookingById(id: string): Promise<Booking | null>;
    getBookingByConfirmationCode(code: string): Promise<Booking | null>;
    updateBooking(id: string, data: UpdateBookingData): Promise<Booking>;
    confirmBooking(id: string): Promise<Booking>;
    seatBooking(id: string): Promise<Booking>;
    completeBooking(id: string): Promise<Booking>;
    markNoShow(id: string): Promise<Booking>;
    cancelBooking(id: string, reason: string, cancelledBy: "customer" | "restaurant" | "system"): Promise<Booking>;
    checkAvailability(businessId: string, date: string, time: string, partySize: number): Promise<boolean>;
    getAvailableTimeSlots(businessId: string): Promise<TimeSlot[]>;
    getRestaurantSettings(businessId: string): Promise<RestaurantSettings | null>;
    updateRestaurantSettings(businessId: string, settings: Partial<RestaurantSettings>): Promise<RestaurantSettings>;
    getOperatingHours(businessId: string): Promise<OperatingHours[]>;
    updateOperatingHours(businessId: string, hours: Omit<OperatingHours, "id" | "business_id" | "created_at">[]): Promise<OperatingHours[]>;
    getTimeSlots(businessId: string): Promise<TimeSlot[]>;
    updateTimeSlots(businessId: string, slots: Omit<TimeSlot, "id" | "business_id" | "created_at">[]): Promise<TimeSlot[]>;
    getBlockedDates(businessId: string): Promise<BlockedDate[]>;
    addBlockedDate(businessId: string, date: string, reason: string, isRecurring?: boolean, recurringType?: "weekly" | "monthly" | "yearly"): Promise<BlockedDate>;
    removeBlockedDate(id: string): Promise<void>;
    getMenuCategories(businessId: string): Promise<MenuCategory[]>;
    createMenuCategory(businessId: string, category: Omit<MenuCategory, "id" | "business_id" | "created_at" | "updated_at">): Promise<MenuCategory>;
    updateMenuCategory(id: string, category: Partial<MenuCategory>): Promise<MenuCategory>;
    deleteMenuCategory(id: string): Promise<void>;
    getMenuItems(businessId: string, categoryId?: string): Promise<MenuItem[]>;
    createMenuItem(businessId: string, item: Omit<MenuItem, "id" | "business_id" | "created_at" | "updated_at">): Promise<MenuItem>;
    updateMenuItem(id: string, item: Partial<MenuItem>): Promise<MenuItem>;
    deleteMenuItem(id: string): Promise<void>;
    getPartners(businessId: string): Promise<Partner[]>;
    addPartner(businessId: string, userId: string, role: "owner" | "manager" | "staff", permissions: string[]): Promise<Partner>;
    updatePartner(id: string, updates: Partial<Partner>): Promise<Partner>;
    removePartner(id: string): Promise<void>;
    getBookingNotifications(bookingId: string): Promise<BookingNotification[]>;
    createNotification(notification: Omit<BookingNotification, "id" | "created_at">): Promise<BookingNotification>;
    getBookingStats(businessId: string, startDate: string, endDate: string): Promise<{
        totalBookings: number;
        confirmedBookings: number;
        cancelledBookings: number;
        completedBookings: number;
        noShowBookings: number;
        totalGuests: any;
        averagePartySize: number;
    }>;
    getUpcomingBookings(businessId: string, days?: number): Promise<Booking[]>;
    getTodaysBookings(businessId: string): Promise<Booking[]>;
    getPartnerRestaurants(): Promise<Restaurant[]>;
};
